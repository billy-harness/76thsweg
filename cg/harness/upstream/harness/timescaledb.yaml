apiVersion: v1
kind: ConfigMap
metadata:
  name: timescaledb-init
data:
  on_start: |
    #!/bin/bash

    # This script should only run on the master instance, Patroni
    # passes on the role in the second parameter
    echo "Running timescaledb-init"
    [ "$2" != "master" ] && exit 0

    echo "SELECT 'CREATE DATABASE harness' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'harness')\gexec" | psql

    echo "SELECT 'CREATE DATABASE harnessti' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'harnessti')\gexec" | psql

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: timescaledb-single-chart-patroni
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
data:
  patroni.yaml: |
    bootstrap:
      dcs:
        loop_wait: 10
        maximum_lag_on_failover: 33554432
        postgresql:
          parameters:
            archive_command: /etc/timescaledb/scripts/pgbackrest_archive.sh %p
            archive_mode: "on"
            archive_timeout: 1800s
            autovacuum_analyze_scale_factor: 0.02
            autovacuum_max_workers: 10
            autovacuum_vacuum_scale_factor: 0.05
            hot_standby: "on"
            log_autovacuum_min_duration: 0
            log_checkpoints: "on"
            log_connections: "on"
            log_disconnections: "on"
            log_line_prefix: '%t [%p]: [%c-%l] %u@%d,app=%a [%e] '
            log_lock_waits: "on"
            log_min_duration_statement: 1s
            log_statement: ddl
            max_connections: 100
            max_prepared_transactions: 150
            shared_preload_libraries: timescaledb,pg_stat_statements
            ssl: "on"
            ssl_cert_file: /etc/certificate/tls.crt
            ssl_key_file: /etc/certificate/tls.key
            tcp_keepalives_idle: 900
            tcp_keepalives_interval: 100
            temp_file_limit: 1GB
            timescaledb.passfile: ../.pgpass
            unix_socket_directories: /var/run/postgresql
            unix_socket_permissions: "0750"
            wal_level: hot_standby
            wal_log_hints: "on"
          use_pg_rewind: true
          use_slots: true
        retry_timeout: 10
        ttl: 30
      method: restore_or_initdb
      post_init: /etc/timescaledb/scripts/post_init.sh
      restore_or_initdb:
        command: |
          /etc/timescaledb/scripts/restore_or_initdb.sh --encoding=UTF8 --locale=C.UTF-8
        keep_existing_recovery_conf: true
    kubernetes:
      ports:
      - name: postgresql
        port: 5432
        targetPort: 5432
      role_label: role
      scope_label: cluster-name
      use_endpoints: true
    log:
      level: WARNING
    postgresql:
      authentication:
        replication:
          username: standby
        superuser:
          username: postgres
      basebackup:
      - waldir: /var/lib/postgresql/wal/pg_wal
      callbacks:
        on_reload: /etc/timescaledb/scripts/patroni_callback.sh
        on_restart: /etc/timescaledb/scripts/patroni_callback.sh
        on_role_change: /etc/timescaledb/scripts/patroni_callback.sh
        on_start: /etc/timescaledb/scripts/patroni_callback.sh
        on_stop: /etc/timescaledb/scripts/patroni_callback.sh
      create_replica_methods:
      - pgbackrest
      - basebackup
      listen: 0.0.0.0:5432
      pg_hba:
      - hostnossl all,replication all                all                reject
      - local     all             all                                   peer
      - hostssl   all             all                127.0.0.1/32       md5
      - hostssl   all             all                ::1/128            md5
      - hostssl   replication     standby            all                md5
      - hostssl   all             all                all                md5
      pgbackrest:
        command: /etc/timescaledb/scripts/pgbackrest_restore.sh
        keep_data: true
        no_master: 1
        no_params: true
      recovery_conf:
        restore_command: /etc/timescaledb/scripts/pgbackrest_archive_get.sh %f "%p"
      use_unix_socket: true
    restapi:
      listen: 0.0.0.0:8008

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: timescaledb-single-chart-scripts
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
data:
  # If no backup is configured, archive_command would normally fail. A failing archive_command on a cluster
  # is going to cause WAL to be kept around forever, meaning we'll fill up Volumes we have quite quickly.
  #
  # Therefore, if the backup is disabled, we always return exitcode 0 when archiving
  pgbackrest_archive.sh: |
    #!/bin/bash
    PGBACKREST_BACKUP_ENABLED=0
    [ "${PGBACKREST_BACKUP_ENABLED}" == "0" ] && exit 0

    source "${HOME}/.pgbackrest_environment"
    exec pgbackrest --stanza=poddb archive-push $1
  pgbackrest_archive_get.sh: |
    #!/bin/bash
    PGBACKREST_BACKUP_ENABLED=0
    [ "${PGBACKREST_BACKUP_ENABLED}" == "0" ] && exit 1

    source "${HOME}/.pgbackrest_environment"
    exec pgbackrest --stanza=poddb archive-get ${1} "${2}"
  pgbackrest_bootstrap.sh: |
    #!/bin/bash
    set -e

    function log {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - bootstrap - $1"
    }

    while ! pg_isready -q; do
        log "Waiting for PostgreSQL to become available"
        sleep 3
    done

    # If we are the primary, we want to create/validate the backup stanza
    if [ "$(psql -c "SELECT pg_is_in_recovery()::text" -AtXq)" == "false" ]; then
        pgbackrest check || {
            log "Creating pgBackrest stanza"
            pgbackrest --stanza=poddb stanza-create --log-level-stderr=info || exit 1
        }
    fi

    log "Starting pgBackrest api to listen for backup requests"
    exec python3 /scripts/pgbackrest-rest.py --stanza=poddb --loglevel=debug
  pgbackrest_restore.sh: |
    #!/bin/bash
    PGBACKREST_BACKUP_ENABLED=0
    [ "${PGBACKREST_BACKUP_ENABLED}" == "0" ] && exit 1

    source "${HOME}/.pod_environment"

    PGDATA="/var/lib/postgresql/data"
    WALDIR="/var/lib/postgresql/wal/pg_wal"

    # A missing PGDATA points to Patroni removing a botched PGDATA, or manual
    # intervention. In this scenario, we need to recreate the DATA and WALDIRs
    # to keep pgBackRest happy
    [ -d "${PGDATA}" ] || install -o postgres -g postgres -d -m 0700 "${PGDATA}"
    [ -d "${WALDIR}" ] || install -o postgres -g postgres -d -m 0700 "${WALDIR}"

    pgbackrest --stanza=poddb --force --delta --log-level-console=detail restore
  restore_or_initdb.sh: |
    #!/bin/bash

    source "${HOME}/.pod_environment"

    function log {
      echo "$(date '+%Y-%m-%d %H:%M:%S') - restore_or_initdb - $1"
    }

    PGDATA="/var/lib/postgresql/data"
    WALDIR="/var/lib/postgresql/wal/pg_wal"

    # Patroni attaches --scope and --datadir to the arguments, we need to strip them off as
    # initdb has no business with these parameters
    initdb_args=""
    for value in "$@"
    do
      [[ $value == --scope* ]] || [[ $value == --datadir* ]] || initdb_args="${initdb_args} $value"
    done

    log "Invoking initdb"
    initdb --auth-local=peer --auth-host=md5 --pgdata="${PGDATA}" --waldir="${WALDIR}" ${initdb_args}
    echo "include_if_exists = '/var/run/postgresql/timescaledb.conf'" >> "${PGDATA}/postgresql.conf"

  post_init.sh: |
    #!/bin/bash
    PGBACKREST_BACKUP_ENABLED=0

    source "${HOME}/.pod_environment"

    function log {
        echo "$(date '+%Y-%m-%d %H:%M:%S') - post_init - $1"
    }

    log "Creating extension TimescaleDB in template1 and postgres databases"
    psql -d "$URL" <<__SQL__
      \connect template1
      -- As we're still only initializing, we cannot have synchronous_commit enabled just yet.
      SET synchronous_commit to 'off';
      CREATE EXTENSION timescaledb;

      \connect postgres
      SET synchronous_commit to 'off';
      CREATE EXTENSION timescaledb;
    __SQL__

    TABLESPACES=""
    for tablespace in $TABLESPACES
    do
      log "Creating tablespace ${tablespace}"
      tablespacedir="/var/lib/postgresql/tablespaces/${tablespace}/data"
      psql -d "$URL" --set tablespace="${tablespace}" --set directory="${tablespacedir}" --set ON_ERROR_STOP=1 <<__SQL__
        SET synchronous_commit to 'off';
        CREATE TABLESPACE :"tablespace" LOCATION :'directory';
    __SQL__
    done

    if [ "${PGBACKREST_BACKUP_ENABLED}" == "1" ]; then
      log "Waiting for pgBackRest API to become responsive"
      while sleep 1; do
          if [ $SECONDS -gt 10 ]; then
              log "pgBackRest API did not respond within $SECONDS seconds, will not trigger a backup"
              exit 0
          fi
          timeout 1 bash -c "echo > /dev/tcp/localhost/8081" 2>/dev/null && break
      done

      log "Triggering pgBackRest backup"
      curl -i -X POST http://localhost:8081/backups
    fi

    # We always exit 0 this script, otherwise the database initialization fails.
    exit 0
  patroni_callback.sh: |
    #!/bin/bash
    set -e

    source "${HOME}/.pod_environment"

    for suffix in "$1" all
    do
      CALLBACK="/etc/timescaledb/callbacks/${suffix}"
      if [ -f "${CALLBACK}" ]
      then
        "${CALLBACK}" $@
      fi
    done

  lifecycle_preStop.psql: |
    \pset pager off
    \set ON_ERROR_STOP true
    \set hostname `hostname`
    \set dsn_fmt 'user=postgres host=%s application_name=lifecycle:preStop@%s connect_timeout=5 options=''-c log_min_duration_statement=0'''

    SELECT
        pg_is_in_recovery() AS in_recovery,
        format(:'dsn_fmt', patroni_scope,                       :'hostname') AS primary_dsn,
        format(:'dsn_fmt', '/var/run/postgresql', :'hostname') AS local_dsn
    FROM
        current_setting('cluster_name') AS cs(patroni_scope)
    \gset

    \timing on
    \set ECHO queries

    -- There should be a CHECKPOINT at the primary
    \if :in_recovery
        \connect :"primary_dsn"
        CHECKPOINT;
    \endif

    -- There should also be a CHECKPOINT locally,
    -- for the primary, this may mean we do a double checkpoint,
    -- but the second one would be cheap anyway, so we leave that as is
    \connect :"local_dsn"
    SELECT 'Issuing checkpoint';
    CHECKPOINT;

    \if :in_recovery
        SELECT 'We are a replica: Successfully invoked checkpoints at the primary and locally.';
    \else
        SELECT 'We are a primary: Successfully invoked checkpoints, now issuing a switchover.';
        \! curl -s http://localhost:8008/switchover -XPOST -d '{"leader": "$(hostname)"}'
    \endif

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: timescaledb-single-chart
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["services"]
  verbs:
  - create
- apiGroups: [""]
  resources:
  - endpoints
  - endpoints/restricted
  verbs:
  - create
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["pods"]
  verbs:
  - get
  - list
  - patch
  - update
  - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: timescaledb-single-chart
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
subjects:
  - kind: ServiceAccount
    name: harness-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: timescaledb-single-chart

---

apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: timescaledb-single-chart-certificate
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lSQU1qSkV5YjVzcWl3N0paWUk0eGpLcFF3RFFZSktvWklodmNOQVFFTEJRQXcKSXpFaE1COEdBMVVFQXhNWWRHbHRaWE5qWVd4bFpHSXRjMmx1WjJ4bExXTm9ZWEowTUI0WERUSXhNRFF3T1RBMQpOVFUwT0ZvWERUSTJNRFF3T1RBMU5UVTBPRm93SXpFaE1COEdBMVVFQXhNWWRHbHRaWE5qWVd4bFpHSXRjMmx1CloyeGxMV05vWVhKME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdVZvM0tuMS8KTzV3aUxWdkF1MWFOeWVIcXRjQU80RXJGOUkxOUh3NkZFR1MrbzdNQmZrU2U5UGFUQnJQeGV3cTNvM1kxaVdYUApGMDJiQ3RSUEMzRmxGQUZPMTRmYmJra1YxNVpYdmdxUlpuaU1Zb0Q0SmRwWDJPSm81Vm1iaVFnOVJBSkJJbVR5CkdGRnowb0lMVTI0Z05jRUZzZEtPSUFhR0NCRG9iRFpDM1MwbWxPQ3JZOE9GU2VpMnVTVGhvWkE5RFpCbG1WQkcKMkMyeDFQYkNGWmtYT2U3MlRtQ1IzcW9nM0JvOVRhSngxMUtjWE1sNzRrbUFmWlZob2Y2dE14cll1dnJTWFdaVQpKY25XdjlaZmxReWZXZ0QvOUljcWpOWXFmdkpkaTc5Z05aS05YME1lSnZYOG5OdjJzR29QcFloOGNpWmxRR29hCnk4eWw2TVc2WXVDM2h3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGZ285MWtMd2xDeExqYkhqdXdTNnFOSWJxOVRicWdDb2R4WW9Jb25OS0huRDdwYVZMM2JuMjdFCmUxQmZLTjVJcGd4ODEyeTVNbW5sNG9wS2NuMmpSWW0zNDFjeHd3L1gweFVqclNTMnF3VTZpNXdjRjBDS0M1Q3gKM3FHZU9aZ3FwekovcHJ1Y2NnNnVZVlBHSFYwUkJ1ZkQzYXZ6RlFsM3FjVUJESE9PUUVwUW5wR25uSU1qbHM0NQpzOURKdWkzYnBCYWRGaVFqeXdnNXA4UnlZSUMvcTVvMzRVb1JXNGI0RnM3Z1BNWnNtRmFTaU9xS1dmRGxVOU92Ck51MUFDNFNtRkgyVXYrZVc0UEhWUklMR0xoeDI3M0JUcVJnMzFIbE8rVmpMNzBrd2tWVDkrS04zclFVUlR5cGgKdC9hYWdDQ2tCWDVPVmxBTnhpRk9mTmM3ekJpb05QYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdVZvM0tuMS9PNXdpTFZ2QXUxYU55ZUhxdGNBTzRFckY5STE5SHc2RkVHUytvN01CCmZrU2U5UGFUQnJQeGV3cTNvM1kxaVdYUEYwMmJDdFJQQzNGbEZBRk8xNGZiYmtrVjE1Wlh2Z3FSWm5pTVlvRDQKSmRwWDJPSm81Vm1iaVFnOVJBSkJJbVR5R0ZGejBvSUxVMjRnTmNFRnNkS09JQWFHQ0JEb2JEWkMzUzBtbE9DcgpZOE9GU2VpMnVTVGhvWkE5RFpCbG1WQkcyQzJ4MVBiQ0Zaa1hPZTcyVG1DUjNxb2czQm85VGFKeDExS2NYTWw3CjRrbUFmWlZob2Y2dE14cll1dnJTWFdaVUpjbld2OVpmbFF5ZldnRC85SWNxak5ZcWZ2SmRpNzlnTlpLTlgwTWUKSnZYOG5OdjJzR29QcFloOGNpWmxRR29heTh5bDZNVzZZdUMzaHdJREFRQUJBb0lCQUhveUZjaDNjQmdXZVJtNgpNYmZQK2k0c09KYVdCYmlzMHhERTdzWTR4bFRtZGlCcDlRUVByVlFGOHl3cUdYdHF0MktXbmZqMUc3QmJRMm5DClNsSmE4YTVjcG1QRmQwNmY5RHhySzNGb2VpODZMaU1LcjQ0VkFuRkQ0cS9CZ1o2M3hkdytPRDY2bWppYUNtZXYKd0ZQQ2VJMjNzVTlvWnJhS1ZuYWUzdnZvVWZDSm9ucFRDYkgvV1pCVUQvVTJCaW42a0ZoSGpJTGJiRTVuNG5IbQpFT2FqUGdDbjNTMjYrVFM0SU1MMnpTUUx4TjZnTWZkNm5PRGhNT1FySDZlVHV4UFFWano5UzE4RWg4QUhsekRvCnRjRytMNG9uVENWSk9KZUFDNUd6MmViZk5lOVEwS2w3ZFdqcmhUcFl5M0ttQThtNG4yMmVVRVc0ckZocTBKRlQKN3JmM2wzRUNnWUVBMnpzU0dQdmFKbnp6enp4N1lrZG8rbDBOYmFsd3pTR0dlYjY2RHJzdStEZnRPUEJyaU1RaApvTk15eTFIc2cxNVNqbDVHZlp0Z1U1VXZvRDlYU0JscjBvVktteDhlR2tuWkQ4a1lEaENZc0RMTDBGb2pZeTJICjJJcEhCaFpVOFZmd2RXVFFkazRJMXlUTFc3c2s3WUVxL2VUdGUyZ3dsSnd2eksvcDhVZW9HZHNDZ1lFQTJIQ0oKMmpsUGRtSnA1azVtSlFTZFFFZG1vVVlubWNzQ3ZycnRvWnY0RWltdW5JdGF1bjIvUUV4RFkrK01CaFo0cHBSUgpqVlh2dmVZY1BOOUpRTVV4OS81VHN2Z3RTVE9yNkk1a0gyQmhsUnovOFBLVkx0c1o3STRWNDZGbHFoMFpNMEYzCkowaEE1eG9tMzREREV5UXBUSm9DbmRCQmVhcHIzYVF4Mm5Ta0ZzVUNnWUFuMkJHTzl0OE1GYk9lRzRqMU1MTlUKcFdyV1huQkE1L0h2MklrcU9qenNJZ1g4VGozTkNwQnVFVlJ1L1lHMTBvUEFta1BIZW1ERWNCM0t5eGhLNDB2awpaQk5PSkJhdGduUnYyUVdGTU9EL1RRd2IzdllGaFhYbUZpT1lhS0NoaUhFTWRQa3FOejZHRTRyZUxpSWxCRS9TCit6TnFOV0oyNy9nRUJJakpNRlBOOXdLQmdBVWN3MlRRTGJ4U0hzWTkyOVBNQkJyY2xPUUNVRFVsd203VzQzNEoKdlJaUXZic2MzNHZBSktCVUxOTlRlUzg3b0tYdW91NS90U1g3SlhlYW5wUlZGQlVUZ002ZFpoUndrQUx5T2hNegpwNXBxRVBHVUNVb09DdEszbUhURC95N0JlVExvdlBQRWxTUGdUa0xCTzlwYjVFM1c1WERzMWw4VlUyN3N6ZkNuCkNLa3hBb0dCQUplbjV1b2VnaDdSZWdNTThIRjdtMm1WaUFSN0NkaXk4NEhFaWlzYi80ZmRkeUlkeEdEVVFhYmsKK09XeUlnWVdCVUNETDlISGlKMlE2SlM2b1Iyc04zZTZwV2M2YU02Y3ovak1DODdkU3JmblYvSHdrMWhyT0RPMwo3anN2RDVidlZxc21jckFBVXRjREZIRFp0ZlYvQ1k0VCthTm1wU2hlS1lzK1h3RHVabjNjCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==

---

apiVersion: v1
kind: Secret
metadata:
  name: timescaledb-single-chart-passwords
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
type: Opaque
data:
  "admin": amFGenFoTFBaV0JPS1VScmN5WXY=
  "postgres": a1hzTVNSaVJFWVhpTWNpVXdNZGo=
  "standby": YVVZaGNVUXBMVlRrR2J1ZWZKVW0=

---

apiVersion: v1
kind: Service
metadata:
  name: timescaledb-single-chart-config
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "service_labels" | nindent 4 }}
spec:
  selector:
    app: timescaledb-single-chart
    cluster-name: timescaledb-single-chart
  type: ClusterIP
  clusterIP: None
  ports:
  - name: patroni
    port: 8008
    protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: timescaledb-single-chart-replica
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
    role: replica
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "service_labels" | nindent 4 }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"   
spec:
  selector:
    app: timescaledb-single-chart
    cluster-name: timescaledb-single-chart
    role: replica
  type: ClusterIP
  ports:
  - name: postgresql
    # This always defaults to 5432, even if `!replicaLoadBalancer.enabled`.
    port: 5432
    protocol: TCP

---

apiVersion: v1
kind: Service
metadata:
  name: timescaledb-single-chart
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
    role: master
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "service_labels" | nindent 4 }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "4000"    
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    # This always defaults to 5432, even if `!loadBalancer.enabled`.
    port: 5432
    targetPort: postgresql
    protocol: TCP

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: timescaledb-single-chart
    chart: timescaledb-single-0.5.5
    release: timescaledb-single-chart
    heritage: Tiller
    cluster-name: timescaledb-single-chart
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "tsdb_labels" | nindent 4 }}
  annotations:  
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "tsdb_deployment_annotations" | nindent 4 }}      
  name: timescaledb-single-chart  
spec:
  serviceName: timescaledb-single-chart
  replicas: repl{{ ConfigOption "timescale_replica" }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: timescaledb-single-chart
      release: timescaledb-single-chart
  template:
    metadata:
      name: timescaledb-single-chart
      labels:
        app: timescaledb-single-chart
        release: timescaledb-single-chart
        cluster-name: timescaledb-single-chart
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "tsdb_labels" | nindent 8 }}
      annotations:
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "tsdb_podspec_annotations" | nindent 8 }} 
        backup.velero.io/backup-volumes: storage-volume     
    spec:
      serviceAccountName: harness-default
      securityContext:
        # The postgres user inside the TimescaleDB image has uid=1000.
        # This configuration ensures the permissions of the mounts are suitable
        fsGroup: 1000
      initContainers:
      # Issuing the final checkpoints on a busy database may take considerable time.
      # Unfinished checkpoints will require more time during startup, so the tradeoff
      # here is time spent in shutdown/time spent in startup.
      # We choose shutdown here, especially as during the largest part of the shutdown
      # we can still serve clients.
      terminationGracePeriodSeconds: 600
      containers:
      - name: timescaledb
        image: timescaledev/timescaledb-ha:pg11.11-ts2.1.0-p1
        securityContext:
          runAsUser: 1000
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - psql
              - -X
              - --file
              - "/etc/timescaledb/scripts/lifecycle_preStop.psql"
        # When reusing an already existing volume it sometimes happens that the permissions
        # of the PGDATA and/or wal directory are incorrect. To guard against this, we always correctly
        # set the permissons of these directories before we hand over to Patroni.
        # We also create all the tablespaces that are defined, to ensure a smooth restore/recovery on a
        # pristine set of Volumes.
        # As PostgreSQL requires to have full control over the permissions of the tablespace directories,
        # we create a subdirectory "data" in every tablespace mountpoint. The full path of every tablespace
        # therefore always ends on "/data".
        # By creating a .pgpass file in the $HOME directory, we expose the superuser password
        # to processes that may not have it in their environment (like the preStop lifecycle hook).
        # To ensure Patroni will not mingle with this file, we give Patroni its own pgpass file.
        # As these files are in the $HOME directory, they are only available to *this* container,
        # and they are ephemeral.
        command:
          - /bin/bash
          - "-c"
          - |
            
            install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/data" "/var/lib/postgresql/wal/pg_wal" || exit 1
            TABLESPACES=""
            for tablespace in ; do
              install -o postgres -g postgres -d -m 0700 "/var/lib/postgresql/tablespaces/${tablespace}/data"
            done

            # Environment variables can be read by regular users of PostgreSQL. Especially in a Kubernetes
            # context it is likely that some secrets are part of those variables.
            # To ensure we expose as little as possible to the underlying PostgreSQL instance, we have a list
            # of allowed environment variable patterns to retain.
            #
            # We need the KUBERNETES_ environment variables for the native Kubernetes support of Patroni to work.
            #
            # NB: Patroni will remove all PATRONI_.* environment variables before starting PostgreSQL

            # We store the current environment, as initscripts, callbacks, archive_commands etc. may require
            # to have the environment available to them
            set -o posix
            export -p > "${HOME}/.pod_environment"
            export -p | grep PGBACKREST > "${HOME}/.pgbackrest_environment"

            for UNKNOWNVAR in $(env | awk -F '=' '!/^(PATRONI_.*|HOME|PGDATA|PGHOST|LC_.*|LANG|PATH|KUBERNETES_SERVICE_.*)=/ {print $1}')
            do
                unset "${UNKNOWNVAR}"
            done

            echo "*:*:*:postgres:${PATRONI_SUPERUSER_PASSWORD}" >> ${HOME}/.pgpass
            chmod 0600 ${HOME}/.pgpass

            export PATRONI_POSTGRESQL_PGPASS="${HOME}/.pgpass.patroni"

            exec patroni /etc/timescaledb/patroni.yaml
        env:
        # We use mixed case environment variables for Patroni User management,
        # as the variable themselves are documented to be PATRONI_<username>_OPTIONS.
        # Where possible, we want to have lowercase usernames in PostgreSQL as more complex postgres usernames
        # requiring quoting to be done in certain contexts, which many tools do not do correctly, or even at all.
        # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#bootstrap-configuration
        - name: PATRONI_admin_OPTIONS
          value: createrole,createdb
        - name: PATRONI_admin_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-single-chart-passwords
              key: "admin"
        - name: PATRONI_postgres_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-single-chart-passwords
              key: "postgres"
        - name: PATRONI_standby_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-single-chart-passwords
              key: "standby"
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-single-chart-passwords
              key: standby
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescaledb-single-chart-passwords
              key: postgres
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        # To specify the PostgreSQL and Rest API connect addresses we need
        # the PATRONI_KUBERNETES_POD_IP to be available as a bash variable, so we can compose an
        # IP:PORT address later on
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):5432"
        - name: PATRONI_RESTAPI_CONNECT_ADDRESS
          value: "$(PATRONI_KUBERNETES_POD_IP):8008"
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: "/var/lib/postgresql/data"
        - name: PATRONI_KUBERNETES_NAMESPACE
          value: '{{repl Namespace}}'
        - name: PATRONI_KUBERNETES_LABELS
          value: "{app: timescaledb-single-chart, cluster-name: timescaledb-single-chart, release: timescaledb-single-chart}"
        - name: PATRONI_SCOPE
          value: timescaledb-single-chart
        - name: PGBACKREST_CONFIG
          value: /etc/pgbackrest/pgbackrest.conf
        # PGDATA and PGHOST are not required to let Patroni/PostgreSQL run correctly,
        # but for interactive sessions, callbacks and PostgreSQL tools they should be correct.
        - name: PGDATA
          value: "$(PATRONI_POSTGRESQL_DATA_DIR)"
        - name: PGHOST
          value: "/var/run/postgresql"
          # pgBackRest is also called using the archive_command if the backup is enabled.
          # this script will also need access to the environment variables specified for
          # the backup. This can be removed once we do not directly invoke pgBackRest
          # from inside the TimescaleDB container anymore
        ports:
        - containerPort: 8008
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
              - pg_isready
              - -h
              - /var/run/postgresql
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: storage-volume
          mountPath: "/var/lib/postgresql"
          subPath: ""
        - mountPath: /etc/timescaledb/patroni.yaml
          subPath: patroni.yaml
          name: patroni-config
          readOnly: true
        - mountPath: /etc/timescaledb/scripts
          name: timescaledb-scripts
          readOnly: true
        - mountPath: /etc/certificate
          name: certificate
          readOnly: true
        - name: socket-directory
          mountPath: /var/run/postgresql
        - name: patroni-callbacks
          mountPath: /etc/timescaledb/callbacks
          readOnly: true
        resources:
          limits:
            cpu: 'repl{{ ConfigOption "timescale_cpu" }}'
            memory: 'repl{{ ConfigOption "timescale_memory" }}Mi'
          requests:
            cpu: 'repl{{ ConfigOption "timescale_cpu" }}'
            memory: 'repl{{ ConfigOption "timescale_memory" }}Mi'  
# repl{{ if ConfigOptionEquals "mode" "production_ha"}}                      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:	
            - labelSelector:	
                matchLabels:	
                  app: timescaledb-single-chart
                  release: "timescaledb-single-chart"
                  cluster-name: timescaledb-single-chart
              topologyKey: kubernetes.io/hostname 
# repl{{ end }}                      
      volumes:
      - name: socket-directory
        emptyDir: {}
      - name: patroni-config
        configMap:
          name: timescaledb-single-chart-patroni
      - name: timescaledb-scripts
        configMap:
          name: timescaledb-single-chart-scripts
          defaultMode: 488 # 0750 permissions
      - name: patroni-callbacks
        configMap:
          name: timescaledb-init
          defaultMode: 488 # 0750 permissions
      - name: certificate
        secret:
          secretName: timescaledb-single-chart-certificate
          defaultMode: 416 # 0640 permissions
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        labels:
          app: timescaledb-single-chart
          release: timescaledb-single-chart
          heritage: Tiller
          cluster-name: timescaledb-single-chart
          purpose: data-directory
      spec:
        accessModes:
        - ReadWriteOnce       
        resources:
          requests:
            storage: 'repl{{ ConfigOption "timescale_storage_capacity" }}Gi'
        storageClassName: '{{repl if (IsKurl) }}local{{repl else}}repl{{ ConfigOption "storage_class" }}{{repl end}}'

---