
apiVersion: v1
kind: Service
metadata:
  labels:
    hazelcast-cluster: harness-manager
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "service_labels" | nindent 4 }} 
  name: harness-manager
  
spec:
  ports:
    - name: http-manager
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: manager-grpc
      port: 9879
      protocol: TCP
      targetPort: 9879  
  selector:
    app: harness-manager
  sessionAffinity: None
  type: ClusterIP

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: harness-manager
  annotations:
    kubernetes.io/ingress.class: 'repl{{ ConfigOption "ingress_class_name" }}'
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "ingress_annotations" | nindent 4 }}
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: harness-manager
              servicePort: 9090
            path: /api
          - backend:
              serviceName: harness-manager
              servicePort: 9090
            path: /stream
# repl{{ if ConfigOptionEquals "scheme" "https"}}
      host: '{{repl ConfigOption "host_name" }}'
  tls:
    - hosts:
      - '{{repl ConfigOption "host_name" }}'
      secretName: harness-cert  
# repl{{ end }}               
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: harness-default

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: manager-grpc
  annotations:
    kubernetes.io/ingress.class: 'repl{{ ConfigOption "ingress_class_name" }}'
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
spec:
  rules:
  - host: 'manager-grpc-{{repl ConfigOption "host_name" }}'
    http:
     paths:
     - backend:
          serviceName: harness-manager
          servicePort: manager-grpc
       path: /
  tls:
  - hosts:
    - 'manager-grpc-{{repl ConfigOption "host_name" }}'
    secretName: 'repl{{ ConfigOption "grpc_cert" }}'
---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: harness-manager-role
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: harness-manager-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: harness-manager-role
subjects:
  - kind: ServiceAccount
    name: harness-default
    namespace: '{{repl Namespace}}'


---

apiVersion: v1
data:
  ALLOWED_ORIGINS: 'repl{{ ConfigOption "loadbalancer_url" }}'
  API_URL: 'repl{{ ConfigOption "loadbalancer_url" }}'
  ATMOSPHERE_BACKEND: REDIS
  BACKGROUND_SCHEDULER_CLUSTERED: "true"
  CACHE_BACKEND: REDIS
  CAPSULE_JAR: rest-capsule.jar
  DELEGATE_DOCKER_IMAGE: 'repl{{ LocalImageName "harness/delegate:latest" }}'
  DELEGATE_METADATA_URL: 'repl{{ ConfigOption "loadbalancer_url" }}/storage/wingsdelegates/delegateprod.txt'
  DELEGATE_SERVICE_TARGET: localhost:9879
  DELEGATE_SERVICE_AUTHORITY: default-authority.harness.io
  DELEGATE_GRPC_TARGET: 'repl{{ ConfigOption "grpc_target" }}'
  DELEGATE_GRPC_AUTHORITY: 'repl{{ ConfigOption "grpc_authority" }}'
  DISTRIBUTED_LOCK_IMPLEMENTATION: REDIS
  DEPLOY_MODE: KUBERNETES_ONPREM
  DISABLE_NEW_RELIC: "true"
  ENABLE_G1GC: "true"
  EXTERNAL_GRAPHQL_RATE_LIMIT: 'repl{{ ConfigOption "external_graphql_rate_limit" }}'
  FEATURES: '{{repl LicenseFieldValue "feature_flag" }}'
  HAZELCAST_NAMESPACE: '{{repl Namespace}}'
  HAZELCAST_SERVICE: harness-manager
  HZ_CLUSTER_NAME: harness-manager
  LOGGING_LEVEL: 'repl{{ ConfigOption "app_log_level" }}'
  MEMORY: 'repl{{ ConfigOption "manager_memory" }}'
  REDIS_SENTINEL: "true"
  REDIS_URL: 'redis://localhost:6379'
  REDIS_MASTER_NAME: 'harness-redis'
  REDIS_SENTINELS: 'redis://redis-sentinel-harness-announce-0.{{repl Namespace}}:26379,redis://redis-sentinel-harness-announce-1.{{repl Namespace}}:26379,redis://redis-sentinel-harness-announce-2.{{repl Namespace}}:26379'
  SERVER_PORT: "9090"
  SERVICE_ACC: /opt/harness/svc/service_acc.json
  UI_SERVER_URL: 'repl{{ ConfigOption "loadbalancer_url" }}'
  VERSION: 1.0.74410
  WATCHER_METADATA_URL: 'repl{{ ConfigOption "loadbalancer_url" }}/storage/wingswatchers/watcherprod.txt'
  LOG_STREAMING_SERVICE_BASEURL: 'repl{{ ConfigOption "loadbalancer_url" }}/log-service/'
  LOG_STREAMING_SERVICE_TOKEN: c76e567a-b341-404d-a8dd-d9738714eb82
# repl{{ if ConfigOptionEquals "ng_enabled" "1"}}
  NG_MANAGER_BASE_URL: 'repl{{ ConfigOption "loadbalancer_url" }}/ng/api/'
  ACCESS_CONTROL_ENABLED: "true"
  ACCESS_CONTROL_BASE_URL: 'repl{{ ConfigOption "loadbalancer_url" }}/authz/api/'
  EVENTS_FRAMEWORK_REDIS_SENTINELS: 'redis://redis-sentinel-harness-announce-0.{{repl Namespace}}:26379,redis://redis-sentinel-harness-announce-1.{{repl Namespace}}:26379,redis://redis-sentinel-harness-announce-2.{{repl Namespace}}:26379'
  EVENTS_FRAMEWORK_SENTINEL_MASTER_NAME: 'harness-redis'
  EVENTS_FRAMEWORK_USE_SENTINEL: "true"
  EVENTS_FRAMEWORK_AVAILABLE_IN_ONPREM: "true"
  EVENTS_FRAMEWORK_REDIS_URL: 'redis://localhost:6379'
# repl{{ end }}
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}
  MONGO_SSL_CONFIG: "true"
  MONGO_SSL_CA_TRUST_STORE_PATH: /opt/harness/keystore.jks
  MONGO_SSL_CA_TRUST_STORE_PASSWORD: password 
 # repl{{ end }} 

kind: ConfigMap
metadata:
  name: harness-manager-config

---

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: harness-manager-config
stringData:
  LICENSE_INFO: '{{repl LicenseFieldValue "license" }}'
  MONGO_URI: '{{repl if ConfigOptionEquals "mode" "production_ha"}}mongodb://admin:CA8FMywpbM@mongodb-replicaset-chart-0.mongodb-replicaset-chart.{{repl Namespace}}.svc.cluster.local,mongodb-replicaset-chart-1.mongodb-replicaset-chart.{{repl Namespace}}.svc.cluster.local,mongodb-replicaset-chart-2.mongodb-replicaset-chart.{{repl Namespace}}.svc.cluster.local:27017/harness?replicaSet=rs0&authSource=admin{{repl else}}mongodb://admin:CA8FMywpbM@mongodb-replicaset-chart-0.mongodb-replicaset-chart.{{repl Namespace}}.svc.cluster.local/harness?authSource=admin{{repl end}}' 
  TIMESCALEDB_URI: 'jdbc:postgresql://timescaledb-single-chart.{{repl Namespace}}:5432/harness'
  TIMESCALEDB_PASSWORD: kXsMSRiREYXiMciUwMdj
  TIMESCALEDB_USERNAME: postgres
  VERIFICATION_SERVICE_SECRET: 59MR5RlVARcdH7zb7pNx6GzqiglBmXR8

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harness-manager
  labels:
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "manager_labels" | nindent 4 }}
  annotations:  
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "manager_deployment_annotations" | nindent 4 }}
spec:
  replicas: repl{{ ConfigOption "manager_replica" }}
  selector:
    matchLabels:
      app: harness-manager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: harness-manager
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "manager_labels" | nindent 8 }} 
      annotations:
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "manager_podspec_annotations" | nindent 8 }}
        license-features-hash: '{{repl (sha256sum (print (LicenseFieldValue "license") (LicenseFieldValue "feature_flag") (ConfigOption "mode") (ConfigOption "loadbalancer_url") )) }}'
    spec:
# repl{{ if ConfigOptionEquals "mode" "production_ha"}}      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:	
            - labelSelector:	
                matchLabels:	
                  app: harness-manager
              topologyKey: kubernetes.io/hostname
# repl{{ end }}              
      serviceAccountName: harness-default
      initContainers:
        - name: check-for-mongo
          image: harness/mongo:4.2.8
          command: 
            - "sh"
          args:
            - "-c"
            - |
              if [ -s /mongo/ca.pem ]; then 
                ssl_args="--tls --tlsCAFile /mongo/ca.pem --tlsCertificateKeyFile /mongo/client.pem"; 
              fi
              until mongo "$(cat /config/MONGO_URI)" $ssl_args --eval "db.adminCommand('ping')"; do echo waiting for mongodb; sleep 2; done
          volumeMounts:
            - name: harness-manager-config
              mountPath: /config
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}                
            - name: mongo-ssl-certs
              mountPath: /mongo
# repl{{ end }}               
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
        - name: check-for-timescaledb
          image: timescaledev/timescaledb-ha:pg11.11-ts2.1.0-p1
          command: ['sh', '-c', "until pg_isready -h timescaledb-single-chart; do echo waiting for timescaledb; sleep 2; done"]
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
      containers:
        - envFrom:
            - configMapRef:
                name: harness-manager-config
            - secretRef:
                name: harness-manager-config
          image: harness/manager-signed:74410
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 65534
            runAsNonRoot: true
          lifecycle:
            preStop:
              exec:
                command:
                  - touch
                  - shutdown
          livenessProbe:
            failureThreshold: 20
            initialDelaySeconds: 180
            httpGet:
              path: /api/version
              port: 9090
              scheme: HTTP
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
            - containerPort: 9879
              protocol: TCP       
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /api/health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}
          volumeMounts:                
            - name: mongo-ssl-certs
              mountPath: /mongo
# repl{{ end }}            
          resources:
            limits:
              cpu: 'repl{{ ConfigOption "manager_cpu" }}'
              memory: 'repl{{ ConfigOption "manager_pod_memory" }}Mi'
            requests:
              cpu: 'repl{{ ConfigOption "manager_cpu" }}'
              memory: 'repl{{ ConfigOption "manager_pod_memory" }}Mi'
      volumes:
        - name: harness-manager-config
          secret:
            secretName: harness-manager-config
            items:
              - key: MONGO_URI
                path: MONGO_URI
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}                
        - name: mongo-ssl-certs
          secret:
            secretName: mongodb-replicaset-ssl-cert
# repl{{ end }}                  
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: harness-manager
  annotations:
    "kots.io/exclude": '{{repl ConfigOptionEquals "manager_pod_disruption_budget" "0"}}'
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: harness-manager 