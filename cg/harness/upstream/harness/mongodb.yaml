apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-chart-mongodb
  annotations:
    "kots.io/exclude": '{{repl ConfigOptionEquals "mongo_ssl" "false" }}'  
data:
  mongod.conf: |
    security:
      clusterAuthMode: x509
    net:
      tls:
        mode: requireTLS
        certificateKeyFile: /data/ssl/mongodb.pem
        CAFile: /data/ssl/ca.pem
        allowConnectionsWithoutCertificates: true
        allowInvalidHostnames: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-chart-mongodb
  annotations:
    "kots.io/exclude": '{{repl ConfigOptionEquals "mongo_ssl" "true" }}'    
data:
  mongod.conf: |
    {}
---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-chart-init
data:
  on-start.sh: |
    #!/usr/bin/env bash
    
    # Copyright 2018 The Kubernetes Authors. All rights reserved.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    set -e pipefail
    
    port=27017
    replica_set="$REPLICA_SET"
    script_name=${0##*/}
    SECONDS=0
    timeout="${TIMEOUT:-900}"
    
    if [[ "$AUTH" == "true" ]]; then
        admin_user="$ADMIN_USER"
        admin_password="$ADMIN_PASSWORD"
        admin_creds=(-u "$admin_user" -p "$admin_password")
        if [[ "$METRICS" == "true" ]]; then
            metrics_user="$METRICS_USER"
            metrics_password="$METRICS_PASSWORD"
        fi
        auth_args=("--auth" "--keyFile=/data/configdb/key.txt")
    fi
    
    log() {
        local msg="$1"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo "[$timestamp] [$script_name] $msg" 2>&1 | tee -a /work-dir/log.txt 1>&2
    }
    
    retry_until() {
        local host="${1}"
        local command="${2}"
        local expected="${3}"
        local creds=("${admin_creds[@]}")
    
        # Don't need credentials for admin user creation and pings that run on localhost
        if [[ "${host}" =~ ^localhost ]]; then
            creds=()
        fi
    
        until [[ $(mongo admin --host "${host}" "${creds[@]}" "${ssl_args[@]}" --quiet --eval "${command}" | tail -n1) == "${expected}" ]]; do
            sleep 1
    
            if (! ps "${pid}" &>/dev/null); then
                log "mongod shutdown unexpectedly"
                exit 1
            fi
            if [[ "${SECONDS}" -ge "${timeout}" ]]; then
                log "Timed out after ${timeout}s attempting to bootstrap mongod"
                exit 1
            fi
    
            log "Retrying ${command} on ${host}"
        done
    }
    
    shutdown_mongo() {
        local host="${1:-localhost}"
        local args='force: true'
        log "Shutting down MongoDB ($args)..."
        if (! mongo admin --host "${host}" "${admin_creds[@]}" "${ssl_args[@]}" --eval "db.shutdownServer({$args})"); then
          log "db.shutdownServer() failed, sending the terminate signal"
          kill -TERM "${pid}"
        fi
    }
    
    ca_pem=/data/ssl/ca.pem
    if [ -f "$ca_pem"  ]; then
      client_pem=/data/ssl/client.pem
      log "Changing ssl_args..."
      ssl_args=(--tls --tlsCAFile "$ca_pem" --tlsCertificateKeyFile "$client_pem")
    fi

    my_hostname=$(hostname)
    log "Bootstrapping MongoDB replica set member: $my_hostname"
    
    log "Reading standard input..."
    while read -ra line; do
        if [[ "${line}" == *"${my_hostname}"* ]]; then
            service_name="$line"
        fi
        peers=("${peers[@]}" "$line")
    done
    
    
    if [[ "${SKIP_INIT}" == "true" ]]; then
        log "Skipping initialization"
        exit 0
    fi
    
    log "Peers: ${peers[*]}"
    log "Starting a MongoDB replica"
    mongod --config /data/configdb/mongod.conf --dbpath=/data/db --replSet="$replica_set" --port="${port}" "${auth_args[@]}" --bind_ip=0.0.0.0 2>&1 | tee -a /work-dir/log.txt 1>&2 &
    pid=$!
    trap shutdown_mongo EXIT
    
    log "Waiting for MongoDB to be ready..."
    retry_until "localhost" "db.adminCommand('ping').ok" "1"
    log "Initialized."
    
    # try to find a master
    for peer in "${peers[@]}"; do
        log "Checking if ${peer} is primary"
        # Check rs.status() first since it could be in primary catch up mode which db.isMaster() doesn't show
        if [[ $(mongo admin --host "${peer}" "${admin_creds[@]}" "${ssl_args[@]}" --quiet --eval "rs.status().myState" | tail -n1) == "1" ]]; then
            retry_until "${peer}" "db.isMaster().ismaster" "true"
            log "Found primary: ${peer}"
            primary="${peer}"
            break
        fi
    done
    
    if [[ "${primary}" = "${service_name}" ]]; then
        log "This replica is already PRIMARY"
    elif [[ -n "${primary}" ]]; then
        if [[ $(mongo admin --host "${primary}" "${admin_creds[@]}" "${ssl_args[@]}" --quiet --eval "rs.conf().members.findIndex(m => m.host == '${service_name}:${port}')" | tail -n1) == "-1" ]]; then
          log "Adding myself (${service_name}) to replica set..."
          if (mongo admin --host "${primary}" "${admin_creds[@]}" "${ssl_args[@]}" --eval "rs.add('${service_name}')" | grep 'Quorum check failed'); then
              log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
              exit 1
          fi
        fi
    
        sleep 3
        log 'Waiting for replica to reach SECONDARY state...'
        retry_until "${service_name}" "rs.status().myState" "2"
        log '✓ Replica reached SECONDARY state.'
    
    elif (mongo "${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"); then
        log "Initiating a new replica set with myself ($service_name)..."
        mongo "${ssl_args[@]}" --eval "rs.initiate({'_id': '$replica_set', 'members': [{'_id': 0, 'host': '$service_name'}]})"
    
        sleep 3
        log 'Waiting for replica to reach PRIMARY state...'
        retry_until "localhost" "db.isMaster().ismaster" "true"
        primary="${service_name}"
        log '✓ Replica reached PRIMARY state.'
    
        if [[ "${AUTH}" == "true" ]]; then
            log "Creating admin user..."
            mongo admin "${ssl_args[@]}" --eval "db.createUser({user: '${admin_user}', pwd: '${admin_password}', roles: [{role: 'root', db: 'admin'}]})"
        fi
    fi
    
    # User creation
    if [[ -n "${primary}" && "$AUTH" == "true" && "$METRICS" == "true" ]]; then
        metric_user_count=$(mongo admin --host "${primary}" "${admin_creds[@]}" "${ssl_args[@]}" --eval "db.system.users.find({user: '${metrics_user}'}).count()" --quiet | tail -n1)
        if [[ "${metric_user_count}" == "0" ]]; then
            log "Creating clusterMonitor user..."
            mongo admin --host "${primary}" "${admin_creds[@]}" "${ssl_args[@]}" --eval "db.createUser({user: '${metrics_user}', pwd: '${metrics_password}', roles: [{role: 'clusterMonitor', db: 'admin'}, {role: 'read', db: 'local'}]})"
        fi
    fi
    
    log "MongoDB bootstrap complete"
    exit 0
---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-chart-admin
type: Opaque
data:
  user: YWRtaW4=
  password: Q0E4Rk15d3BiTQ==
---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-chart-keyfile
type: Opaque
data:
  key.txt: b0x0dVV4dmN6VmJ3a2ViRnRoT0E=
---

apiVersion: v1
kind: Secret
metadata:
  labels:
    app: mongodb-replicaset
  name: mongodb-replicaset-ssl-cert
  annotations:
    "kots.io/exclude": '{{repl ConfigOptionEquals "mongo_ssl" "false" }}'   
type: Opaque
data:
  ca.pem: '{{repl ConfigOption "ca_pem" }}'
  mongodb.pem: '{{repl ConfigOption "mongo_pem" }}'
  client.pem: '{{repl ConfigOption "client_pem" }}'
---

apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: mongodb-replicaset
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "service_labels" | nindent 4 }} 
  name: mongodb-replicaset-chart
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: mongodb
      port: 27017
  publishNotReadyAddresses: true
  selector:
    app: mongodb-replicaset
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mongodb-replicaset
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "mongo_labels" | nindent 4 }}
  annotations:  
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "mongo_deployment_annotations" | nindent 4 }}       
  name: mongodb-replicaset-chart
spec:
  selector:
    matchLabels:
      app: mongodb-replicaset
  serviceName: mongodb-replicaset-chart
  replicas: repl{{ ConfigOption "mongo_replica" }}
  template:
    metadata:
      labels:
        app: mongodb-replicaset
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "mongo_labels" | nindent 8 }} 
      annotations:
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "mongo_podspec_annotations" | nindent 8 }} 
        checksum/config: fca3516170d327de50810cf50494e20bed3e41732799a291de1d1563b1a247cf
        backup.velero.io/backup-volumes: datadir       
    spec:
# repl{{ if ConfigOptionEquals "mode" "production_ha"}}      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:	
            - labelSelector:	
                matchLabels:	
                  app: mongodb-replicaset
              topologyKey: kubernetes.io/hostname
# repl{{ end }}                
      serviceAccountName: harness-default
      securityContext:
        runAsUser: 999
        fsGroup: 999
        runAsNonRoot: true
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: copy-config
          image: busybox:1.33.1
          imagePullPolicy: "IfNotPresent"
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x

              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
              cp /keydir-readonly/key.txt /data/configdb/key.txt
              chmod 600 /data/configdb/key.txt
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
            - name: keydir
              mountPath: /keydir-readonly
          resources:
            {}
            
        - name: install
          image: harness/mongodb-install:0.8
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
          resources:
            {}
            
        - name: bootstrap
          image: harness/mongo:4.2.8
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=mongodb-replicaset-chart"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: TIMEOUT
              value: "180"
            - name: SKIP_INIT
              value: "false"
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "mongodb-replicaset-chart-admin"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "mongodb-replicaset-chart-admin"
                  key: password
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}                
            - name: mongo-ssl-certs
              mountPath: /data/ssl
# repl{{ end }}                
          resources:
            {}
            
      containers:
        - name: mongodb-replicaset
          image: harness/mongo:4.2.8
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: mongodb
              containerPort: 27017
          resources:
            limits:
              cpu: 'repl{{ ConfigOption "mongo_cpu" }}'
              memory: 'repl{{ ConfigOption "mongo_memory" }}Mi'
            requests:
              cpu: 'repl{{ ConfigOption "mongo_cpu" }}'
              memory: 'repl{{ ConfigOption "mongo_memory" }}Mi'
            
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            - --replSet=rs0
            - --port=27017
            - --bind_ip=0.0.0.0
            - --auth
            - --keyFile=/data/configdb/key.txt
            - --wiredTigerCacheSizeGB={{repl ConfigOption "wired_tiger_cache_size" }}
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}                
            - name: mongo-ssl-certs
              mountPath: /data/ssl
# repl{{ end }}                

      volumes:
        - name: config
          configMap:
            name: mongodb-replicaset-chart-mongodb
        - name: init
          configMap:
            defaultMode: 0755
            name: mongodb-replicaset-chart-init
        - name: keydir
          secret:
            defaultMode: 0400
            secretName: mongodb-replicaset-chart-keyfile
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
# repl{{ if ConfigOptionEquals "mongo_ssl" "true"}}             
        - name: mongo-ssl-certs
          secret:
            defaultMode: 0400
            secretName: mongodb-replicaset-ssl-cert
# repl{{ end }}          
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 'repl{{ ConfigOption "mongo_storage_capacity" }}Gi'
        storageClassName: '{{repl if (IsKurl) }}local{{repl else}}repl{{ ConfigOption "storage_class" }}{{repl end}}'
---