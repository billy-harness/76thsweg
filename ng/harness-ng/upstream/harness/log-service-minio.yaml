apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: log-service-minio
stringData:
  accesskey: minio
  secretkey: minio123
---

apiVersion: v1
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the buckets
    createBucket logs none false
kind: ConfigMap
metadata:
  labels:
    app: log-service-minio
  name: log-service-minio
---


apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: log-service-minio
  annotations:
    kubernetes.io/ingress.class: 'repl{{ ConfigOption "ingress_class_name" }}'
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "ingress_annotations" | nindent 4 }}
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: log-service-minio
              servicePort: 9000
            path: /minio
# repl{{ if ConfigOptionEquals "scheme" "https"}}
      host: '{{repl ConfigOption "host_name" }}'
  tls:
    - hosts:
      - '{{repl ConfigOption "host_name" }}'
      secretName: harness-cert  
# repl{{ end }}             
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: log-service-minio
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 4 }}
  name: log-service-minio
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: log-service-minio
  sessionAffinity: None
  type: ClusterIP
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: log-service-minio
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 'repl{{ ConfigOption "log_storage_capacity" }}Gi'
  storageClassName: '{{repl if (IsKurl) }}local{{repl else}}repl{{ ConfigOption "storage_class" }}{{repl end}}'
---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:  
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "minio_deployment_annotations" | nindent 4 }}
  labels:
    app: log-service-minio
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 4 }}
  name: log-service-minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-service-minio
  strategy:
    type: Recreate      
  template:
    metadata:
      labels:
        app: log-service-minio
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 8 }}
      annotations:
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "minio_podspec_annotations" | nindent 8 }}        
      name: log-service-minio
    spec:
      containers:
      - command:
        - /bin/sh
        - -ce
        - /usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /data
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: log-service-minio
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: log-service-minio
        image: minio/minio:RELEASE.2022-01-08T03-11-54Z
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/live
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        name: log-service-minio
        ports:
        - containerPort: 9000
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /minio/health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: "1"
            memory: 4Gi
        volumeMounts:
        - mountPath: /data
          name: data
      serviceAccountName: harness-default
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
      volumes:
      - name: minio-user
        secret:
          defaultMode: 420
          secretName: log-service-minio
      - name : data 
        persistentVolumeClaim:
          claimName: log-service-minio
