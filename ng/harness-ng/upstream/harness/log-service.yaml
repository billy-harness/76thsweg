apiVersion: v1
kind: ConfigMap
metadata:
  name: log-service  
data:
  LOG_SERVICE_S3_BUCKET: 'repl{{ ConfigOption "s3_bucket_name" }}'
  LOG_SERVICE_S3_REGION: 'repl{{ ConfigOption "s3_region" }}'
  LOG_SERVICE_S3_ENDPOINT: 'repl{{ ConfigOption "s3_endpoint" }}'
  LOG_SERVICE_S3_PATH_STYLE: "true"
  LOG_SERVICE_DISABLE_AUTH: "true"
---

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: log-service
stringData:
  LOG_SERVICE_S3_ACCESS_KEY_ID: 'repl{{ ConfigOption "s3_access_key" }}'
  LOG_SERVICE_S3_SECRET_ACCESS_KEY: 'repl{{ ConfigOption "s3_secret_key" }}'
  LOG_SERVICE_GLOBAL_TOKEN: c76e567a-b341-404d-a8dd-d9738714eb82
  LOG_SERVICE_SECRET: IC04LYMBf1lDP5oeY4hupxd4HJhLmN6azUku3xEbeE3SUx5G3ZYzhbiwVtK4i7AmqyU9OZkwB4v8E9qM
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: log-service
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    kubernetes.io/ingress.class: 'repl{{ ConfigOption "ingress_class_name" }}'
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "ingress_annotations" | nindent 4 }}
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: log-service
              servicePort: 8079
            path: /log-service(/|$)(.*)
# repl{{ if ConfigOptionEquals "scheme" "https"}}
      host: '{{repl ConfigOption "host_name" }}'
  tls:
    - hosts:
      - '{{repl ConfigOption "host_name" }}'
      secretName: harness-cert  
# repl{{ end }}             
---

apiVersion: v1
kind: Service
metadata:
  name: log-service
  labels:
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 4 }}
spec:
  type: ClusterIP
  ports:
  - name: log-service
    port: 8079
    protocol: TCP
    targetPort: 8079
  selector:
    app: log-service
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-service
  labels:
    app: log-service
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 4 }}
  annotations:  
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "log_service_deployment_annotations" | nindent 4 }}    
spec:
  progressDeadlineSeconds: 300
  replicas: repl{{ ConfigOption "log_service_replica" }}
  selector:
    matchLabels:
      app: log-service
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate          
  template:
    metadata:
      labels:
        app: log-service
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "labels" | nindent 8 }}
      annotations:
        kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "log_service_podspec_annotations" | nindent 8 }}        
    spec:
      terminationGracePeriodSeconds: 30
# repl{{ if ConfigOptionEquals "mode" "production_ha"}}        
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:	
            - labelSelector:	
                matchLabels:	
                  app: log-service
              topologyKey: kubernetes.io/hostname
# repl{{ end }}                
      serviceAccountName: harness-default      
      containers:
      - envFrom:
        - configMapRef:
            name: log-service
        - secretRef:
            name: log-service
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-log-svc
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: http-log-svc
          initialDelaySeconds: 10
          periodSeconds: 10
        name: log-service
        image: harness/log-service-signed:release-18
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 65534
          runAsNonRoot: true
        ports:
        - name: http-log-svc
          containerPort: 8079
          protocol: "TCP"    
        resources:
          limits:
            memory: 'repl{{ ConfigOption "log_service_pod_memory" }}Mi'
            cpu: 'repl{{ ConfigOption "log_service_cpu" }}'
          requests:
            memory: 'repl{{ ConfigOption "log_service_pod_memory" }}Mi'
            cpu: 'repl{{ ConfigOption "log_service_cpu" }}'